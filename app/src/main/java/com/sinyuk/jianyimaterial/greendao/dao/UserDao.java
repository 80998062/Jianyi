package com.sinyuk.jianyimaterial.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sinyuk.jianyimaterial.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Lastlogin = new Property(3, String.class, "lastlogin", false, "LASTLOGIN");
        public final static Property Lastip = new Property(4, String.class, "lastip", false, "LASTIP");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Openid = new Property(6, String.class, "openid", false, "OPENID");
        public final static Property Sex = new Property(7, String.class, "sex", false, "SEX");
        public final static Property Role_id = new Property(8, String.class, "role_id", false, "ROLE_ID");
        public final static Property Realname = new Property(9, String.class, "realname", false, "REALNAME");
        public final static Property Province = new Property(10, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(11, String.class, "city", false, "CITY");
        public final static Property Country = new Property(12, String.class, "country", false, "COUNTRY");
        public final static Property Heading = new Property(13, String.class, "heading", false, "HEADING");
        public final static Property Language = new Property(14, String.class, "language", false, "LANGUAGE");
        public final static Property Gamount = new Property(15, String.class, "Gamount", false, "GAMOUNT");
        public final static Property Tel = new Property(16, String.class, "tel", false, "TEL");
        public final static Property Self_words = new Property(17, String.class, "self_words", false, "SELF_WORDS");
        public final static Property Edu_id = new Property(18, String.class, "edu_id", false, "EDU_ID");
        public final static Property Idcard = new Property(19, String.class, "idcard", false, "IDCARD");
        public final static Property Self_introduction = new Property(20, String.class, "self_introduction", false, "SELF_INTRODUCTION");
        public final static Property School = new Property(21, String.class, "school", false, "SCHOOL");
        public final static Property Last_x = new Property(22, String.class, "last_x", false, "LAST_X");
        public final static Property Last_y = new Property(23, String.class, "last_y", false, "LAST_Y");
        public final static Property Current_school = new Property(24, String.class, "current_school", false, "CURRENT_SCHOOL");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"STATUS\" TEXT," + // 1: status
                "\"NAME\" TEXT," + // 2: name
                "\"LASTLOGIN\" TEXT," + // 3: lastlogin
                "\"LASTIP\" TEXT," + // 4: lastip
                "\"EMAIL\" TEXT," + // 5: email
                "\"OPENID\" TEXT," + // 6: openid
                "\"SEX\" TEXT," + // 7: sex
                "\"ROLE_ID\" TEXT," + // 8: role_id
                "\"REALNAME\" TEXT," + // 9: realname
                "\"PROVINCE\" TEXT," + // 10: province
                "\"CITY\" TEXT," + // 11: city
                "\"COUNTRY\" TEXT," + // 12: country
                "\"HEADING\" TEXT," + // 13: heading
                "\"LANGUAGE\" TEXT," + // 14: language
                "\"GAMOUNT\" TEXT," + // 15: Gamount
                "\"TEL\" TEXT," + // 16: tel
                "\"SELF_WORDS\" TEXT," + // 17: self_words
                "\"EDU_ID\" TEXT," + // 18: edu_id
                "\"IDCARD\" TEXT," + // 19: idcard
                "\"SELF_INTRODUCTION\" TEXT," + // 20: self_introduction
                "\"SCHOOL\" TEXT," + // 21: school
                "\"LAST_X\" TEXT," + // 22: last_x
                "\"LAST_Y\" TEXT," + // 23: last_y
                "\"CURRENT_SCHOOL\" TEXT);"); // 24: current_school
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String lastlogin = entity.getLastlogin();
        if (lastlogin != null) {
            stmt.bindString(4, lastlogin);
        }
 
        String lastip = entity.getLastip();
        if (lastip != null) {
            stmt.bindString(5, lastip);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(7, openid);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String role_id = entity.getRole_id();
        if (role_id != null) {
            stmt.bindString(9, role_id);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(10, realname);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(11, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(12, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(13, country);
        }
 
        String heading = entity.getHeading();
        if (heading != null) {
            stmt.bindString(14, heading);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(15, language);
        }
 
        String Gamount = entity.getGamount();
        if (Gamount != null) {
            stmt.bindString(16, Gamount);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(17, tel);
        }
 
        String self_words = entity.getSelf_words();
        if (self_words != null) {
            stmt.bindString(18, self_words);
        }
 
        String edu_id = entity.getEdu_id();
        if (edu_id != null) {
            stmt.bindString(19, edu_id);
        }
 
        String idcard = entity.getIdcard();
        if (idcard != null) {
            stmt.bindString(20, idcard);
        }
 
        String self_introduction = entity.getSelf_introduction();
        if (self_introduction != null) {
            stmt.bindString(21, self_introduction);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(22, school);
        }
 
        String last_x = entity.getLast_x();
        if (last_x != null) {
            stmt.bindString(23, last_x);
        }
 
        String last_y = entity.getLast_y();
        if (last_y != null) {
            stmt.bindString(24, last_y);
        }
 
        String current_school = entity.getCurrent_school();
        if (current_school != null) {
            stmt.bindString(25, current_school);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastlogin
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lastip
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // openid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // role_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // realname
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // province
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // city
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // country
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // heading
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // language
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Gamount
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // tel
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // self_words
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // edu_id
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // idcard
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // self_introduction
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // school
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // last_x
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // last_y
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // current_school
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastlogin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastip(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOpenid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRole_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRealname(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProvince(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCity(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCountry(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHeading(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLanguage(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGamount(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTel(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSelf_words(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEdu_id(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIdcard(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSelf_introduction(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSchool(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLast_x(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLast_y(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCurrent_school(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
