package com.sinyuk.jianyimaterial.greendao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.sinyuk.jianyimaterial.model.User;

import com.sinyuk.jianyimaterial.model.YihuoDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "YIHUO_DETAILS".
*/
public class YihuoDetailsDao extends AbstractDao<YihuoDetails, String> {

    public static final String TABLENAME = "YIHUO_DETAILS";

    /**
     * Properties of entity YihuoDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Date = new Property(0, java.util.Date.class, "date", false, "DATE");
        public final static Property Id = new Property(1, String.class, "id", true, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Detail = new Property(3, String.class, "detail", false, "DETAIL");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Price = new Property(5, String.class, "price", false, "PRICE");
        public final static Property Tel = new Property(6, String.class, "tel", false, "TEL");
        public final static Property Sort = new Property(7, String.class, "sort", false, "SORT");
        public final static Property Del = new Property(8, String.class, "del", false, "DEL");
        public final static Property Top = new Property(9, String.class, "top", false, "TOP");
        public final static Property Time = new Property(10, String.class, "time", false, "TIME");
        public final static Property Uid = new Property(11, String.class, "uid", false, "UID");
        public final static Property Way = new Property(12, String.class, "way", false, "WAY");
        public final static Property Reason = new Property(13, String.class, "reason", false, "REASON");
        public final static Property Viewcount = new Property(14, String.class, "viewcount", false, "VIEWCOUNT");
        public final static Property X = new Property(15, String.class, "x", false, "X");
        public final static Property Y = new Property(16, String.class, "y", false, "Y");
        public final static Property Oldprice = new Property(17, String.class, "oldprice", false, "OLDPRICE");
        public final static Property Pic = new Property(18, String.class, "pic", false, "PIC");
    };

    private DaoSession daoSession;

    private Query<YihuoDetails> user_YihuoLikesQuery;

    public YihuoDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public YihuoDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"YIHUO_DETAILS\" (" + //
                "\"DATE\" INTEGER," + // 0: date
                "\"ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 1: id
                "\"NAME\" TEXT," + // 2: name
                "\"DETAIL\" TEXT," + // 3: detail
                "\"TITLE\" TEXT," + // 4: title
                "\"PRICE\" TEXT," + // 5: price
                "\"TEL\" TEXT," + // 6: tel
                "\"SORT\" TEXT," + // 7: sort
                "\"DEL\" TEXT," + // 8: del
                "\"TOP\" TEXT," + // 9: top
                "\"TIME\" TEXT," + // 10: time
                "\"UID\" TEXT NOT NULL ," + // 11: uid
                "\"WAY\" TEXT," + // 12: way
                "\"REASON\" TEXT," + // 13: reason
                "\"VIEWCOUNT\" TEXT," + // 14: viewcount
                "\"X\" TEXT," + // 15: x
                "\"Y\" TEXT," + // 16: y
                "\"OLDPRICE\" TEXT," + // 17: oldprice
                "\"PIC\" TEXT);"); // 18: pic
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"YIHUO_DETAILS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, YihuoDetails entity) {
        stmt.clearBindings();
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(1, date.getTime());
        }
        stmt.bindString(2, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(4, detail);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(7, tel);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(8, sort);
        }
 
        String del = entity.getDel();
        if (del != null) {
            stmt.bindString(9, del);
        }
 
        String top = entity.getTop();
        if (top != null) {
            stmt.bindString(10, top);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(11, time);
        }
        stmt.bindString(12, entity.getUid());
 
        String way = entity.getWay();
        if (way != null) {
            stmt.bindString(13, way);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(14, reason);
        }
 
        String viewcount = entity.getViewcount();
        if (viewcount != null) {
            stmt.bindString(15, viewcount);
        }
 
        String x = entity.getX();
        if (x != null) {
            stmt.bindString(16, x);
        }
 
        String y = entity.getY();
        if (y != null) {
            stmt.bindString(17, y);
        }
 
        String oldprice = entity.getOldprice();
        if (oldprice != null) {
            stmt.bindString(18, oldprice);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(19, pic);
        }
    }

    @Override
    protected void attachEntity(YihuoDetails entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public YihuoDetails readEntity(Cursor cursor, int offset) {
        YihuoDetails entity = new YihuoDetails( //
            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // date
            cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // detail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sort
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // del
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // top
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // time
            cursor.getString(offset + 11), // uid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // way
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // reason
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // viewcount
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // x
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // y
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // oldprice
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // pic
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, YihuoDetails entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setId(cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDetail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSort(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTop(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUid(cursor.getString(offset + 11));
        entity.setWay(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setReason(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setViewcount(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setX(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setY(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOldprice(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPic(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(YihuoDetails entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(YihuoDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "yihuoLikes" to-many relationship of User. */
    public List<YihuoDetails> _queryUser_YihuoLikes(String uid) {
        synchronized (this) {
            if (user_YihuoLikesQuery == null) {
                QueryBuilder<YihuoDetails> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Uid.eq(null));
                queryBuilder.orderRaw("T.'DATE' DESC");
                user_YihuoLikesQuery = queryBuilder.build();
            }
        }
        Query<YihuoDetails> query = user_YihuoLikesQuery.forCurrentThread();
        query.setParameter(0, uid);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM YIHUO_DETAILS T");
            builder.append(" LEFT JOIN USER T0 ON T.\"UID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected YihuoDetails loadCurrentDeep(Cursor cursor, boolean lock) {
        YihuoDetails entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public YihuoDetails loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<YihuoDetails> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<YihuoDetails> list = new ArrayList<YihuoDetails>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<YihuoDetails> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<YihuoDetails> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
